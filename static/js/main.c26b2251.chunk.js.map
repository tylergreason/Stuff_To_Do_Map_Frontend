{"version":3,"sources":["store/actions/authActions.js","components/ServerResponseCard.js","auth/Login.js","auth/Signup.js","auth/CheckLogin.js","store/actions/generalActions.js","generalFunctions.js","components/general/ToggleListButton.js","containers/Navbar.js","components/About.js","components/general/Button.js","store/actions/MapActions.js","components/attractionCards/attractionCardGeneralFunctions.js","components/maps/mapFunctions.js","components/attractionCards/MyAttractionListCard.js","components/attractionCards/EditAttractionCard.js","store/actions/AttractionActions.js","components/attractionCards/NewAttractionCard.js","icons/Icons.js","components/maps/MyAttractionListMap.js","containers/MyAttractionsList.js","store/actions/UserActions.js","components/myAccount/EditPassword.js","components/myAccount/EditEmail.js","components/myAccount/EditInfo.js","components/myAccount/DeleteAccount.js","components/myAccount/MyAccount.js","components/attractionCards/AttractionMapListCard.js","components/reviewCards/ReviewCard.js","store/actions/ReviewActions.js","containers/ReviewList.js","components/reviewCards/WriteReviewCard.js","components/attractionCards/AttractionListCardLarge.js","components/attractionCards/OTMAttractionCardSmall.js","otmFunctions.js","components/attractionCards/OTMAttractionCardLarge.js","containers/AttractionListHeader.js","containers/AttractionList.js","components/maps/Map.js","containers/MapPage.js","App.js","serviceWorker.js","store/reducers/mapReducer.js","store/reducers/userReducer.js","store/reducers/attractionReducer.js","store/reducers/generalReducer.js","store/reducers/index.js","index.js"],"names":["API_URL","logout","type","login","user","returnMessage","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","error","token","localStorage","setItem","catch","ServerResponseCard","props","response","className","length","map","success","Login","state","email","password","handleInput","e","setState","target","name","value","message","handleSubmit","preventDefault","infoToSubmit","redirectToHomeIfLoggedIn","loggedIn","history","push","renderLoginForm","onSubmit","placeholder","onChange","id","this","Component","withRouter","connect","Signup","first_name","last_name","username","city","country","password_confirmation","signUp","renderSignUpForm","class","onClick","newUser","CheckLogin","getItem","render","to","handleReturn","getAttractionListShown","list","document","getElementsByClassName","undefined","classList","contains","showList","toggleIconHoveredClass","Array","from","forEach","marker","remove","markerToHover","querySelector","add","toggleHoveredClass","element","getElementById","scrollElementIntoViewById","scrollIntoView","findAttractionList","toggleAttractionListShow","toggle","attractionListStatus","ToggleListButton","componentDidMount","buttonText","page","handleClick","general","Navbar","path","location","pathname","currentPage","removeHighlightClass","buttons","allNavBarButtons","addHighlightToButton","componentDidUpdate","checkForMobile","windowWidth","button","handleNavbarClick","clear","navBarButtons","navBarClassName","renderLoggedInNavbar","renderLoggedOutNavbar","renderNavbar","renderToggleAttractionListShowButton","text","About","href","Button","highlightAttraction","attractionId","renderAddress","attraction","returnHouseNumber","returnRoad","returnCity","returnState","returnCountry","house_number","road","renderRating","average_rating","createFindLocationButton","L","Control","Location","extend","onAdd","locationButton","DomUtil","create","innerText","DomEvent","on","stopPropagation","locate","setView","addClass","onRemove","options","position","addTo","mapVariable","setMapVariable","deleteAttraction","auth_token","myAttractions","lat","lng","description","editClick","EditAttractionCard","serverResponse","updateAttraction","setServerResponse","backToList","rows","getAttraction","NewAttractionForm","prevProps","newAttraction","updateNewAttractionAddress","newAddress","bridgeObject","keys","key","addAttraction","iconWithCustomText","divIcon","html","iconAnchor","userIconMarker","iconSize","otmIcon","markerId","otmMarker","editIcon","mapsList","MyAttractionListMap","createMap","attractionLayer","layerGroup","editLayer","attractions","renderAttractionMarkers","clearLayers","onMapClick","formToRender","latlng","wrap","resp","fillAttractionForm","address","lon","icon","handleMarkerClick","cardId","myMap","tileLayer","attribution","maxZoom","minZoom","preferCanvas","zoomSnap","zoomDelta","tileSize","zoomOffset","accessToken","process","Map","addInitHook","getContainer","_leaflet_map","southWestBounds","getBounds","_southWest","northEastBounds","_northEast","control","scale","MyAttractionList","getMyAttractions","renderMyAttractions","handleAttractionEditClick","attractionToEdit","filter","parseInt","handleNewAttractionClick","renderAttractionEditForm","renderNewAttractionForm","renderStateForm","getUser","EditPassword","renderChangePasswordForm","handleUpdatePasswordSubmit","dataToSubmit","userId","updatePassword","userInfo","current_password","new_password","EditEmail","renderUpdateEmailForm","currentEmail","handleUpdateEmailSubmit","updateEmail","EditInfo","receivedProps","handleUpdateInfoSubmit","updateUser","renderUpdateInfoForm","DeleteAccount","save_attractions","handleKeepAttractionsSelect","renderPasswordInputs","renderUserChoice","renderKeepAttractionsSelect","renderDeleteAccountButton","handleDeleteAccountSubmit","deleteUser","AttractionMapListCard","cardClick","user_id","deleteReview","review","user_first_name","user_last_name","created_at","rating","role","aria-label","ReviewList","reviews","WriteReviewCard","handleOptionSelect","renderNotLoggedIn","renderReturnMessage","clearWriteReviewArea","submitReview","attraction_id","addReview","renderWriteReview","defaultValue","AttractionListCardLarge","renderReviewList","renderWriteReviewCard","renderBackButton","backClick","properties","xid","rate","fetchOTMData","attractionBounds","thenFunction","south","north","east","west","features","fetchWikiData","wikidataId","OTMAttractionCardLarge","wikidata","setWikidata","renderWikipediaData","renderImage","preview","src","source","renderCardData","wikipedia_extracts","AttractionListHeader","headerText","listCount","attractionList","hidden","otmAttractionList","AttractionList","selectedOTMAttractionId","selectedOTMXid","renderAttractionsListHeader","otmAttractions","toggleAttractionListHidden","toggleOTMAttractionListHidden","renderAttractionCards","attractionCardClick","renderOTMAttractionCards","highlightAttractionId","otmAttractionCardClick","backToAttractionListClick","attractionCardLargeToRender","otmLayer","renderOTMMarkers","geometry","coordinates","handleOTMMarkerClick","onMapChange","bounds","setBounds","MapPage","otmBoundsThreshold","setOTMAttractions","queryOTMAttractions","checkBounds","parseBounds","getAttractions","Math","abs","status","App","componentWillMount","setWindowWidth","window","innerWidth","addEventListener","changeAppLoggedIn","boolean","component","MyAttractionsList","width","Boolean","hostname","match","defaultState","mapReducer","action","userReducer","attractionReducer","otmAttractionId","generalReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c26b2251.chunk.js","sourcesContent":["const API_URL = 'https://stdm-backend.herokuapp.com/'\n// const API_URL = 'http://localhost:3000'\n\n\nexport const logout = () => {\n    return {\n        type: \"LOGOUT\"\n    }\n}\n\nexport const signUp = (newUser, returnMessage) => {\n    return dispatch => {\n        fetch(`${API_URL}/signup`,{\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({user: newUser})\n    })\n    .then(res => res.json())\n    .then(data => {\n        console.log(data) \n        if (data.error){\n            returnMessage(data)\n        }else if (data.token){\n                localStorage.setItem('auth_token',data.token)\n                returnMessage(data)\n                dispatch({type:'LOGIN', user:data.user})\n            }\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        })\n    }\n}\n\n\nexport const login = (user, returnMessage) => {\n    return dispatch => {\n        fetch(`${API_URL}/login`,{\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({user: user})\n    })\n    .then(res => res.json())\n    .then(data => {\n        console.log(data) \n        if (data.error){\n            returnMessage(data)\n        }else if (data.token){\n                localStorage.setItem('auth_token',data.token)\n                returnMessage(data)\n                dispatch({type:'LOGIN', user:data.user})\n            }\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        })\n    }\n}","import React from 'react' \n\nexport const ServerResponseCard = props => {\n    // server returned error\n    if (props.response.error){\n        // if there is only one error (Rails returned a string)\n        if (typeof(props.response.error) === 'string') {\n            return (\n                <ul className=\"serverResponseList error\">\n                    <li className=\"serverResponseItem\">{props.response.error}</li> \n                </ul>\n                )\n                // else if error is not blank and is an array \n        }else if (props.response.error.length > 0 && typeof(props.response.error) === 'object'){\n            return (\n            <ul className=\"serverResponseList error\">\n                    {props.response.error.map(response => {\n                        return <li className=\"serverResponseItem\">{response}</li> \n                    })}\n            </ul>\n            )\n        }\n    }else if (props.response.success){\n        // server did not return error\n        return(\n            <div className=\"serverResponse success\">\n                {props.response.success}\n            </div>)\n    }else{\n        return(<></>)\n    }\n}","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport { login } from '../store/actions/authActions'\nimport { withRouter } from 'react-router'\nimport { ServerResponseCard } from '../components/ServerResponseCard'\n\nclass Login extends Component{\n    state= {\n        email:'', \n        password:'',\n        returnMessage:[]\n    }\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    returnMessage = message => {\n        this.setState({\n            returnMessage:message\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // arrange user info how backend wants \n        const infoToSubmit = {\n            email: this.state.email, \n            password: this.state.password\n        } \n        this.props.login(infoToSubmit, this.returnMessage)\n    }\n\n    redirectToHomeIfLoggedIn = () => {\n        // set the path and history to the map page for appropriate button highlighting \n        if (this.props.loggedIn === true){\n            this.props.history.push('/')\n        }\n    }\n\n    renderLoginForm = () => {\n        return(\n            <div className='login'>\n                {/* <label> Login </label> */}\n                <form onSubmit={this.handleSubmit} className=\"informationBox\">\n                <label>Email: </label>\n                <br></br>\n                <input type=\"text\" name='email' placeholder=\"Email\" onChange={this.handleInput} value={this.state.email} />\n                <br></br>\n                <label>Password: </label>\n                <br></br>\n                <input type=\"password\" name='password' placeholder=\"password\" onChange={this.handleInput} value={this.state.password} />\n                <ServerResponseCard response={this.state.returnMessage} />\n                <br></br>\n                <button id=\"submit\" type=\"submit\" value=\"Submit\">Login</button>\n                </form>\n            </div>\n        ) \n    }\n\n    render(){\n        return (\n            <>\n                {this.redirectToHomeIfLoggedIn()}\n                {this.renderLoginForm()}\n            </>\n        ) \n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        loggedIn: state.user.loggedIn  \n    }\n}\nexport default withRouter(connect(mapStateToProps, {login})(Login))","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport { login, logout, signUp } from '../store/actions/authActions'\nimport { withRouter } from 'react-router'\nimport { ServerResponseCard } from '../components/ServerResponseCard'\n\nclass Signup extends Component {\n    state = {\n        user:{\n            first_name:'',\n            last_name:'',\n            username:'',\n            city:'',\n            state:'',\n            country:'',\n            email:'', \n            password:'', \n            password_confirmation:''\n        }, \n        returnMessage:\"\"\n    }\n\n    redirectToHomeIfLoggedIn = () => {\n        if (this.props.loggedIn === true){\n            this.props.history.push('/')\n        }\n    }\n    handleInput = (e) => {\n        this.setState({\n            ...this.state, \n            user:{\n                ...this.state.user,\n                [e.target.name]:e.target.value\n            }\n        })\n    }\n\n    returnMessage = message => {\n        this.setState({\n            returnMessage:message\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.email !== \"\" && this.state.password === this.state.password_confirmation){\n            this.props.signUp(this.state.user, this.returnMessage)\n        }else{\n        }\n    }\n    \n    renderSignUpForm = () =>{\n        return (\n            <div className=\"signup\">\n            {/* <label>Sign Up</label> */}\n            <div className='informationBox'>\n            {this.redirectToHomeIfLoggedIn()}\n            <form>\n                 <label>First Name: </label>\n                <input  name='first_name' \n                    value={this.state.user.first_name} \n                    onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Last Name: </label>\n                <input  name='last_name' \n                        value={this.state.user.last_name} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Username: </label>\n                <input  name='username' \n                        value={this.state.user.username} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Email: </label>\n                <br></br>\n                <input  name='email' \n                        value={this.state.user.email} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>City: </label>\n                <br></br>\n                <input  name='city' \n                        value={this.state.user.city} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>State: </label>\n                <br></br>\n                <input  name='state' \n                        value={this.state.user.state} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Country: </label>\n                <br></br>\n                <input  name='country' \n                        value={this.state.user.country} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Password: </label>\n                <br></br>\n                <input type=\"password\" \n                        name=\"password\" \n                        onChange={this.handleInput} \n                        value={this.state.user.password} \n                />\n                <br></br>\n                <label>Confirm Password: </label>\n                <br></br>\n                <input type=\"password\" \n                        name=\"password_confirmation\" \n                        onChange={this.handleInput} \n                        value={this.state.user.password_confirmation} \n                />\n                <br></br>\n                <ServerResponseCard response={this.state.returnMessage} />\n                <button id=\"submit\" \n                        class=\"signupButton\"\n                        type=\"submit\" \n                        onClick={this.handleSubmit}>\n                Sign Up</button>\n\n            </form>\n        </div>\n        </div>\n        ) \n    }\n    render(){\n        return (\n            <>\n            {this.renderSignUpForm()}\n            </>\n        ) \n    }\n}\nconst mapStateToProps = state => {\n    return {\n        loggedIn:state.user.loggedIn\n    }\n}\nexport default withRouter(connect(mapStateToProps,{login, logout, signUp })(Signup))","import React from 'react'; \nimport { Redirect } from 'react-router-dom'\n\nconst handleReturn = (props) => {\n    // check if user is logged in \n    if(localStorage.getItem('auth_token')){\n        // return <props.component /> \n        return props.render()\n    }else{\n        // redirect to map page if they are not logged in \n        return <Redirect to='/' />\n    }\n}\n\nconst CheckLogin =(props) => {\n    return (\n        <>\n        { handleReturn(props) }\n        </>\n    )\n}\n\nexport default CheckLogin;","export const setWindowWidth = value => {\n    return {\n        type: \"SET_WINDOW_WIDTH\",\n        width: value\n    }\n}\n\nexport const getAttractionListShown = () => {\n//     // find the first (and only) element with the class AttractionList\n//     // find its first value\n    const list = document.getElementsByClassName(\"AttractionList\")[0]\n    // if list exists\n    if (list !== undefined){\n        if (list.classList.contains(\"showList\")){\n            // if list contains showList class (if list is shown)\n            return {\n                type: \"SET_SHOWLIST\",\n                showList: true\n            }\n        }else{\n            // if list is not shown: \n            return {\n                type: \"SET_SHOWLIST\",\n                showList: false\n            }\n        }\n    } else{\n        return {\n            type: \"SET_SHOWLIST\",\n            showList: false\n        }\n    }\n}\n\n\n// export const setAttractionList = () => {\n//     // find the first (and only) element with the class AttractionList\n//     // find its first value\n\n//     const list = document.getElementsByClassName(\"AttractionList\")[0]\n//     if (list !== undefined){\n//         return {\n//             type: \"SET_ATTRACTION_LIST\",\n//             list: list\n//         }\n//     }else{\n\n//     }\n// }","export const toggleIconHoveredClass = id => {\n    // find all attraction markers and remove their 'hovered' class if they have it \n    const markers = Array.from(document.getElementsByClassName('icon'))\n    // console.log(markers);\n    markers.forEach(marker => marker.classList.remove('hovered'))\n\n    // find the marker to add the 'hovered' class to \n    const markerToHover = document.querySelector(`[id$='con${id}']`);\n\n    if (markerToHover){\n            markerToHover.classList.add('hovered') \n    }\n}\n\nexport const toggleHoveredClass = (className,id) => {\n    // find all elements with this class name\n    const elements = Array.from(document.getElementsByClassName(className));\n    // remove the 'hovered' class from each of those elements \n    elements.forEach(element => element.classList.remove('hovered')); \n    // find the element to add 'hovered' to \n    const elementToHover = document.getElementById(`${className}${id}`)\n    // add the 'hovered' class to that element \n    elementToHover.classList.add('hovered'); \n}\n\nexport const scrollElementIntoView = (idStart, idEnd) => {\n    const element = document.querySelector(`[id^='${idStart}'][id$='${idEnd}']`)\n    // debugger\n    if (element) {\n            console.log(element)\n            element.scrollIntoView()\n    }\n}\n\nexport const scrollElementIntoViewById = id =>{\n    const element = document.getElementById(id) \n    // debugger \n    if (element){\n            element.scrollIntoView()\n    }\n}\n\n// find attraction list and return it if it exists \nconst findAttractionList = () =>{\n    // find the first (and only) element with the class AttractionList\n    // find its first value\n    const list = document.getElementsByClassName(\"AttractionList\")[0]\n    \n    // if there is a list, return it\n    if (list !== undefined){\n            return list\n    }\n}\n\nexport const toggleAttractionListShow = () => {\n    const list = findAttractionList() \n    console.log(list)\n    if (list !== undefined){\n            list.classList.toggle(\"showList\")\n    }else{\n        console.log(\"That list doesn't exist!\")\n    }\n}\n\n// boolean for if attraction list has showList class \nexport const attractionListStatus = () => {\n    const list = findAttractionList() \n    if (list !== undefined){\n        // debugger\n        return list.classList.contains(\"showList\")\n    }\n}\n\n","import React, { Component } from 'react' \nimport { connect } from 'react-redux'\nimport { getAttractionListShown } from '../../store/actions/generalActions'\nimport { toggleAttractionListShow } from '../../generalFunctions'\n\n\nclass ToggleListButton extends Component {\n    componentDidMount = () => {\n        // set button text upon mounting \n        this.buttonText()\n    }\n\n    buttonText = () => {\n        // if on the myAttraction page: \n        if (this.props.page === \"/myAttractions\"){\n            // set whether the button text is 'show' or 'hide' 'attractions' based on if the list is shown or not \n            if (this.props.showList === true){\n                return \"Hide Attractions\"\n            }else{\n                return \"My Attractions\"\n            }\n        }else{\n\n            // set whether the button text is 'show' or 'hide' 'attractions' based on if the list is shown or not \n            if (this.props.showList === true){\n                return \"Hide Attractions\"\n            }else{\n                return \"Show Attractions\"\n            }\n        }\n    }\n\n    handleClick = () => {\n        toggleAttractionListShow() \n        this.props.getAttractionListShown()\n        this.buttonText()\n    }\n\n    render(){\n        return(\n            <button\n            className=\"toggleListButton\"\n            onClick={() => this.handleClick()}\n            >\n                {this.buttonText()} \n                </button>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        showList: state.general.showList\n    }\n}\n\n\nexport default connect(mapStateToProps, { getAttractionListShown })(ToggleListButton)","import React, { Component } from 'react' \nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { logout } from '../store/actions/authActions'\nimport { getAttractionListShown } from '../store/actions/generalActions'\nimport { attractionListStatus } from '../generalFunctions'\nimport { toggleAttractionListShow } from '../generalFunctions'\nimport ToggleListButton from '../components/general/ToggleListButton'\n\n\nclass Navbar extends Component {\n    state = {\n        path:this.props.location.pathname\n    }\n\n    currentPage = this.props.history.location.pathname;\n\n    componentDidMount = () =>{\n        this.removeHighlightClass()\n        const buttons = this.allNavBarButtons()\n        this.addHighlightToButton(buttons)\n        // set whether the attraction list is shown in the state \n        this.props.getAttractionListShown()\n\n    }\n    \n    // in component did update, check to see if any buttons have a class that matches this state's path \n    componentDidUpdate = () => {\n        this.currentPage = this.props.history.location.pathname;\n        console.log(this.currentPage)\n        //remove highlight from all buttons \n        this.removeHighlightClass()\n        // loop through the buttons, and if their name matches this state's path value, then give that button the highlight class \n        const buttons = this.allNavBarButtons() \n        this.addHighlightToButton(buttons)\n        // toggleAttractionListShow()\n        console.log('navbar updated')\n        // set whether the attraction list is shown in the state \n        this.props.getAttractionListShown()\n    }\n    \n    checkForMobile = () =>{\n        // if the window is less than 870 pixels wide, the user is probably on mobile. Return true. \n        return this.props.windowWidth < 870\n    }\n    \n    addHighlightToButton = buttons => {\n        buttons.forEach(button => {\n            if (button.value === this.currentPage){\n                button.classList.add('highlight')\n            }\n        })\n    }\n    \n    handleNavbarClick = (e) => {\n        const path = e.target.value\n        this.props.history.push(path)\n        this.removeHighlightClass()\n        e.target.classList.add('highlight')\n        console.log(e.target.classList)\n    }\n\n    logout = () => {\n        localStorage.clear()\n        this.props.logout()\n        this.props.history.push('/')\n    }\n    \n    // remove highlight class from all NavBar buttons\n    removeHighlightClass = () =>{\n        const buttons = this.allNavBarButtons()\n        buttons.forEach(button => button.classList.remove('highlight'))\n    }\n    \n    allNavBarButtons = () => {\n        const navBarButtons = document.getElementsByClassName('NavBarButton'); \n        return Array.from(navBarButtons) \n    }\n    \n    // choose class name based on window width \n    navBarClassName = () => {\n        if (this.checkForMobile()){\n            return \"NavBarParent\"\n        }else{\n            return \"NavBarParent\"\n        }\n    }\n    \n    renderLoggedInNavbar = () => {\n        return (\n            <>\n                <button className='NavBarButton highlight' value='/' name='map' onClick={this.handleNavbarClick}>Map</button>\n                <button className='NavBarButton' value='/about' name='/about' onClick={this.handleNavbarClick}>About</button>\n                <button className='NavBarButton' value=\"/myAttractions\" name='myAttractions' onClick={this.handleNavbarClick}>My Attractions</button>\n                <button className='NavBarButton' value=\"/myAccount\" name='myAccount' onClick={this.handleNavbarClick}>My Account</button>\n                <button className='NavBarButton' value=\"/logout\" name='logout' onClick={this.logout}>Log Out</button>\n            </>\n        )\n    }\n    \n    renderLoggedOutNavbar = () => {\n        return (\n            <>\n                <button className='NavBarButton'  value='/' name='map' onClick={this.handleNavbarClick}>Map</button>\n                <button className='NavBarButton'  value='/about' name='about' onClick={this.handleNavbarClick}>About</button>\n                <button className='NavBarButton'  value='/signup' name='signUp' onClick={this.handleNavbarClick}>Sign Up</button>\n                <button className='NavBarButton'  value=\"/login\" name='login' onClick={this.handleNavbarClick}>Log In</button>\n            </>\n        )\n    }\n\n    renderNavbar = () => {\n            if (this.props.loggedIn){\n                return this.renderLoggedInNavbar() \n            }else if (this.props.loggedIn===false){\n                return this.renderLoggedOutNavbar() \n            }\n    }\n\n    renderToggleAttractionListShowButton = () => {\n        // check width and render if this width is small enough \n        console.log(attractionListStatus())\n        if (this.checkForMobile()){\n            if (this.currentPage === \"/\" || this.currentPage === \"/myAttractions\"){\n                return (<ToggleListButton \n                            text={attractionListStatus()}\n                            page={this.currentPage}\n                        />)\n            }\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <div className={this.navBarClassName()}>\n                {this.renderToggleAttractionListShowButton()}\n            <h1 className='title'>Stuff To Do Map</h1>\n                <span className=\"NavBar\">\n                    {this.renderNavbar()}\n                </span>\n            </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loggedIn: state.user.loggedIn,\n        windowWidth: state.general.windowWidth\n    }   \n}\n\nexport default withRouter(connect(mapStateToProps, {logout, getAttractionListShown})(Navbar))","import React from 'react' \n\nconst About = () => {\n    return(\n        <div className='About'>\n            <div className=\"informationBox\">\n            {/* <h2 className='title'>About</h2> */}\n            <h3>Hi, and thanks for visiting my site!</h3>\n            <div>\n                This web application was built for my final project for Flatiron's Software Engineering program. It was made to show off what we learned during our 12 weeks leading up to beginning the project. \n                {/* You can find out more at the two Github repos below. Feel free to contact me if you'd like to discuss the project, employment, or anything else!  */}\n            </div>\n            <h3>How to Use</h3>\n            <div>\n                Click <label>Map</label> in the navigation bar above to view the map of attractions. There are two kinds of attractions: user attractions and OTM attractions. User attractions are those uploaded by users like you. OTM attractions are attractions queried from the Open Trip Map API. They currently only show historical districts. \n                <br></br>\n                If you would like to contribute, sign up for an account by clicking <label>Sign Up</label> in the navigation bar above. Once you have signed up, click <label>My Attractions</label>, then New Attraction to make a new attraction. Fill in the appropriate fields, and click on the map where your attraction should be located. Click Submit, and your attraction will now appear for others to see! \n                <br></br>\n                User attractions can receive ratings from users. This is to ensure any attractions that aren't up to the communities standards appear as such. To review an attraction, simply click on its listing or marker on the <label>Map</label> page, and submit your review and rating at the bottom!\n            </div>\n            <h3>More About the Author and Project</h3>\n            <div>\n                Stuff To Do Map was created with the purpose of helping people find things to do around them. I was inspired to make Stuff To Do Map after visiting cities the world over and struggling to <em>easily</em> find things to do near me in each city. While I found numerous sites that would show me what the best expensive tours or restaurants were, I never found a site that would show me exactly what I wanted: historical sites within walking distance. \n                <br></br>\n                Stuff To Do Map is exactly what I wanted to have back then, and what I will use while traveling in the future. I hope you give it a go the next time you're out and about! You can find my contact information below if you would like to give feedback on how to improve Stuff To Do Map.\n            </div>\n            <ul>\n            <li>\n                <a href=\"https://github.com/tylergreason/Stuff_To_Do_Map_Frontend\">Stuff To Do Map Frontend Repo</a>\n            </li>\n            <li>\n                <a href=\"https://github.com/tylergreason/Stuff_To_Do_Map_Backend\">Stuff To Do Map Backend Repo</a>\n            </li>\n            <li>\n                <a href=\"https://github.com/tylergreason/\">Github</a>\n            </li>\n            <li>\n                <a href=\"https://twitter.com/tylergreason\">Twitter</a>            \n            </li>\n            <li>\n                <a href=\"mailto:tylergreason@gmail.com\">tylergreason@gmail.com</a>\n            </li>\n            <li>\n                <a href=\"https://www.tylergreason.com\">Portfolio</a>\n            </li>\n            <li>\n                <a href=\"https://www.linkedin.com/in/tyler-greason\">LinkedIn</a>\n            </li>\n            </ul>\n            </div>\n\n        </div>\n    )\n}\n\nexport default About","import React from 'react' \n\nconst Button = (props) => {\n    return(\n        <button name={props.name} onClick={props.onClick}>{props.text}</button>\n    )\n}\n\nexport default Button ","const API_URL = 'https://stdm-backend.herokuapp.com/'\n// const API_URL = 'http://localhost:3000'\n\n\nexport const getAttractions = (bounds) => {\n    return (dispatch) => {\n        fetch(`${API_URL}/attractions`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json', \n                'south': bounds.south,\n                'north': bounds.north,\n                'east': bounds.east, \n                'west': bounds.west\n            }, \n            // body: JSON.stringify(data)\n            })\n            .then((response) => {\n                console.log(response.status);\n                console.log(response.body);\n                return response.json();\n             })\n            .then((data) => {\n                console.log(data)\n                dispatch({type:'GET_ATTRACTIONS', attractions: data})\n            })\n            .catch((error) => {\n            console.error('Error:', error);\n            });\n    }\n}\n\n\nexport const getMyAttractions = () => {\n    return (dispatch) => {\n        fetch(`${API_URL}/myAttractions`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            }, \n            // body: JSON.stringify(data)\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)  \n                dispatch({type:'GET_MY_ATTRACTIONS', myAttractions: data})\n            })\n            .catch((error) => {\n            console.error('Error:', error);\n            });\n    }\n}\n\nexport const deleteAttraction = (id) => {\n    return (dispatch) => {\n        fetch(`${API_URL}/attractions/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            }\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                dispatch({type:'DELETE_ATTRACTION', myAttractions: data})\n            })\n            .catch((error) => {\n            console.error('Error:', error);\n            });\n    }\n}\n\nexport const updateAttraction = (attraction,returnMessage) => {\n    return (dispatch) => {\n        fetch(`${API_URL}/attractions/${attraction.id}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            },\n            body: JSON.stringify(attraction),\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if (data.error){\n                    returnMessage(data)\n                }else{\n                    dispatch({type:'UPDATE_ATTRACTION', myAttractions: data})\n                    returnMessage('Success')\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\nexport const highlightAttraction = attractionId => {\n    return (dispatch) => {\n        dispatch({type:'HIGHLIGHT_ATTRACTION', attractionId:attractionId})\n    }\n}\n\n","import React from 'react'\n\nexport const renderAddress = (attraction) => {\n        // debugger\n        let returnHouseNumber = '';\n        let returnRoad = '';\n        let returnCity = '';\n        let returnState = '';\n        let returnCountry = '';\n        \n        if (attraction.house_number !== undefined) {\n            returnHouseNumber = attraction.house_number; \n        }\n        if (attraction.road) {\n            returnRoad = attraction.road + ', '; \n        }\n        if (attraction.city) {\n            returnCity = attraction.city + ', '; \n        }\n        if (attraction.state) {\n            returnState = attraction.state + ', '; \n        }\n        if (attraction.country) {\n            returnCountry = attraction.country; \n        }\n        return  (\n            <div className='address'>\n                {returnHouseNumber} {returnRoad} {returnCity} {returnState} {returnCountry}\n            </div>\n        )\n}\n\nexport const renderRating = attraction => {\n    if (attraction.average_rating){\n        return(\n            <span className='rating'> - {attraction.average_rating}⭐️</span>\n        )\n    }else{\n        return(\n            <span className='rating'> - No Reviews Yet</span>\n        )\n    }\n}","import L from 'leaflet';\n\n\nexport const createFindLocationButton = (map) => {\n    // create button for map \n    L.Control.Location = L.Control.extend({\n        onAdd: function(){\n            const locationButton = L.DomUtil.create('button')\n            locationButton.innerText=\"gps_fixed\"\n            L.DomEvent.on(\n                locationButton,\n                'click', \n                function(e){\n                    // e.stopPropigation()\n                    L.DomEvent.stopPropagation(e);\n                    map.locate({setView:true})\n                })\n            L.DomUtil.addClass(locationButton, \"locationButton\")\n            L.DomUtil.addClass(locationButton, \"material-icons\")\n            // locationButton.innerText='dfdsafasdf'\n            return locationButton \n        }, \n        onRemove: function() {\n            // Nothing to do here\n        }\n    }); \n\n    const locationButtonToAdd =(options) => {\n        return new L.Control.Location(options); \n    }\n\n    return locationButtonToAdd({position:'topleft'}).addTo(map)\n}\n\n\n\n// this is a copy of the MyAttractions map, kept here instead of the store because the redux extension kept crashing, indicating that I was keeping too much data there. \n// A copy of the map is kept here so the MyAttractionList cards can access it and use setView() to change the map's view to the coordinates of that attraction. \nexport let mapVariable = () => {\n    return this \n}\n\nexport const setMapVariable = (map) => {\n    mapVariable = map; \n    console.log(mapVariable)\n}\n","import React from 'react' \nimport Button from '../general/Button'\nimport { connect } from 'react-redux'\nimport { deleteAttraction } from '../../store/actions/MapActions'\nimport { toggleIconHoveredClass, toggleHoveredClass } from '../../generalFunctions'\nimport { renderAddress, renderRating } from './attractionCardGeneralFunctions'\nimport { mapVariable } from '../maps/mapFunctions'\n\n\nconst MyAttractionListCard = (props) => {\n\n    const deleteAttraction = (e) => {\n        e.preventDefault()\n        // use .name to get the id of the attraction to be destroyed\n        console.log(e.target.name)\n        props.deleteAttraction(e.target.name)\n    }\n\n    return(\n    <div \n        className=\"AttractionListCard animated fadeIn faster\" \n        id={`AttractionListCard${props.attraction.id}`}\n        onClick={() => {\n                toggleIconHoveredClass(props.attraction.id)\n                toggleHoveredClass(\"AttractionListCard\", props.attraction.id)\n                mapVariable.setView({lat: props.attraction.lat,lng: props.attraction.lng})\n                // props.map.setView({lat: props.attraction.lat,lng: props.attraction.lng})\n            }}\n    >\n        <h4 className=\"name\">{props.attraction.name}</h4>\n        {renderRating(props.attraction)}\n        {renderAddress(props.attraction)}\n        <p className=\"description\">{props.attraction.description}</p>\n        <br></br>\n        {<Button \n            text={\"🗑\"}\n            name={props.attraction.id}\n            onClick={deleteAttraction}\n        ></Button>}\n        {<Button \n            text={\"✏️\"}\n            name={props.attraction.id}\n            onClick={props.editClick}\n        ></Button>}\n    </div>)\n}\n\nexport default connect(null, {deleteAttraction })(MyAttractionListCard)","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport { updateAttraction } from '../../store/actions/MapActions'\nimport { ServerResponseCard } from '../ServerResponseCard'\n\nclass EditAttractionCard extends Component {\n    state = {\n        attraction:\"\",\n        serverResponse:[]\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            ...this.state, \n            attraction: {\n                ...this.state.attraction,\n                [e.target.name]:e.target.value\n            }\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.updateAttraction(this.state.attraction, this.setServerResponse)\n    }\n    \n    componentDidMount = () =>{\n        // set state to attraction so the form is already filled \n        if (this.props.attraction !== undefined){\n            this.setState({\n                attraction:this.props.attraction\n            })\n        }\n    }\n    componentDidUpdate = () => {\n        if (this.state.serverResponse === \"Success\"){\n            this.props.backToList()\n        }\n    }\n\n    setServerResponse = (message) =>{\n        this.setState({\n            serverResponse:message\n        })\n    }\n\n    render(){\n        return (\n            <div className=\" AttractionListCard editAttractionForm\">\n            <form>\n                <label>Name: </label>\n                <br></br>\n                <input \n                    name=\"name\" \n                    value={this.state.attraction.name || \"\"}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <label>Description:</label>\n                <br></br>\n                <textarea rows='4'\n                    name=\"description\" \n                    value={this.state.attraction.description || \"\"}\n                    onChange={this.handleInput}\n                ></textarea>\n                <br></br>\n                {/* removed ability to edit attraction location */}\n                {/* <input \n                    name=\"house_number\" \n                    value={this.state.attraction.house_number}\n                    onChange={this.handleInput}\n                ></input>\n                <input \n                    name=\"road\" \n                    value={this.state.attraction.road}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <input \n                    name=\"city\" \n                    value={this.state.attraction.city}\n                    onChange={this.handleInput}\n                ></input>\n                <input \n                    name=\"state\" \n                    value={this.state.attraction.state}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <input \n                    name=\"country\" \n                    value={this.state.attraction.country}\n                    onChange={this.handleInput}\n                ></input> */}\n                <br></br>\n                <ServerResponseCard response={this.state.serverResponse} />\n                <button \n                    type='submit'\n                    onClick={this.handleSubmit}\n                >Save Changes</button>\n            </form>\n            </div>\n        )\n    }\n}\n\nexport default connect(null,{ updateAttraction })(EditAttractionCard)","const API_URL = 'https://stdm-backend.herokuapp.com/'\n// const API_URL = 'http://localhost:3000'\n\n\nexport const  fillAttractionForm = (attraction,lat,lng) => {\n    let newAddress = {...attraction, lat:lat, lng: lng}\n    return {\n        type:'FILL_ATTRACTION_FORM', newAddress:newAddress\n    }\n}\n\nexport const addAttraction = (attraction,returnMessage) => {\n    console.log('addAttraction fired ')\n    return (dispatch) => {\n        fetch(`${API_URL}/attractions/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            },\n            body: JSON.stringify(attraction),\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if (data.error){\n                    returnMessage(data)\n                }else{\n                    // because of the way I'm rendering data on the backend and the way I want to handle the success of a new attraction, I'm hardcoding the object with a success key here so the component submitting the new attraction will know to go to the previous screen.\n                    returnMessage({success:\"Success\"})\n                    dispatch({type:'ADD_ATTRACTION', myAttractions: data})\n                }\n            })\n    }\n}\n\nexport const getAttraction = (attractionId) => {\n    console.log(attractionId)\n    return (dispatch) => {\n        fetch(`${API_URL}/attractions/${attractionId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            console.log(data)\n            dispatch({type:'GET_ATTRACTION', attraction: data})\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n    }\n}\n","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport { addAttraction } from '../../store/actions/AttractionActions'\nimport { ServerResponseCard } from '../ServerResponseCard'\n\nimport { getAttractionListShown } from '../../store/actions/generalActions'\nimport { toggleAttractionListShow } from '../../generalFunctions'\n\nclass NewAttractionForm extends Component {\n    state = {\n        attraction:{\n            name:'',\n            description:'',\n            house_number:'', \n            road:'',\n            city:'', \n            state:'', \n            country:'',\n            lat:'',\n            lng:''\n        }, \n        returnMessage:[]\n    }\n\n    componentDidUpdate = prevProps => {\n        if (this.props.newAttraction !== undefined){\n            if (prevProps.newAttraction !== this.props.newAttraction){\n                console.log(this.props.newAttraction)\n                console.log('attraction address updated')\n                this.props.getAttractionListShown() \n                toggleAttractionListShow()\n                return this.updateNewAttractionAddress(this.props.newAttraction)\n            }\n        }\n        // check if response didn't contain error and isn't blank \n        if (this.state.returnMessage.success){\n                this.props.backToList();\n            } \n        }\n    \n\n    updateNewAttractionAddress = newAddress => {\n        // create variable to hold bridgeObjectData \n        const bridgeObject = {} \n        // create an array of data points we want from the new address \n        let keys = ['house_number','road','city','state','country','lat','lng']; \n        // set all the bridge objects keys that we want from the API equal to this state's data so none goes missing \n        keys.forEach(key => bridgeObject[key] = this.state.attraction[key])\n        //  loop through keys, and for each key that newAddress has that isn't undefined, set this.state.key to that \n        keys.forEach(key => { \n            if (newAddress[key] !== undefined && newAddress[key] !== \"\" && newAddress[key] !== this.state.attraction[key]){\n                bridgeObject[key] = newAddress[key]\n            }\n        })\n        // console.log(bridgeObject)\n        this.setState({\n            ...this.state, \n            attraction:{\n                ...this.state.attraction,\n                house_number:bridgeObject.house_number,\n                road:bridgeObject.road,\n                city:bridgeObject.city, \n                state: bridgeObject.state, \n                country: bridgeObject.country,\n                lat:bridgeObject.lat,\n                lng:bridgeObject.lng\n                // [key]:newAddress[key]\n            }\n        })\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            ...this.state, \n            attraction: {\n                ...this.state.attraction,\n                [e.target.name]:e.target.value\n            }\n        })\n    }\n\n    returnMessage = (message) =>{\n        this.setState({\n            returnMessage:message\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault() \n        console.log(this.state.attraction)\n        this.props.addAttraction(this.state.attraction,this.returnMessage)\n    }\n\n    render(){\n        return (\n            <div className=\"informationBox newAttractionForm\">\n            <form\n                onSubmit={this.handleSubmit}\n                class=\"newAttraction\"\n            >\n                <label>Name</label>\n                <br></br>\n                <input \n                    name=\"name\" \n                    value={this.state.attraction.name}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <label>Description</label>\n                <br></br>\n                <textarea rows='4'\n                    name=\"description\" \n                    value={this.state.attraction.description}\n                    onChange={this.handleInput}\n                    class=\"newAttraction__desc\"\n                ></textarea>\n                <br></br>\n                <label>Building Number</label>\n                <br></br>\n                <input \n                    name=\"house_number\" \n                    value={this.state.attraction.house_number}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <label>Street</label>\n                <br></br>\n                <input \n                    name=\"road\" \n                    value={this.state.attraction.road}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <label>City</label>\n                <br></br>\n                <input \n                    name=\"city\" \n                    value={this.state.attraction.city}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <label>State</label>\n                <br></br>\n                <input \n                    name=\"state\" \n                    value={this.state.attraction.state}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <label>Country</label>\n                <br></br>\n                <input \n                    name=\"country\" \n                    value={this.state.attraction.country}\n                    onChange={this.handleInput}\n                ></input>\n                <br></br>\n                <ServerResponseCard response={this.state.returnMessage} />\n                <button \n                    type='submit'\n                >Save Changes</button>\n            </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        newAttraction: state.map.newAddress\n    }\n}\n\nexport default connect(mapStateToProps, { addAttraction, getAttractionListShown })(NewAttractionForm)","import L from 'leaflet' \nimport './iconStyle.css'\n\n\nexport const userIcon = L.divIcon({\n    className: 'materialMapIcon',\n    html: \"<span class='material-icons userIcon'>place</span>\",\n    iconAnchor: [12,30]\n})\nconst editIconMarker = `<span class='material-icons editIcon'>\n                            edit_location\n                        </span>\n                        <span class='markerShadow material-icons'>\n                            <!-- trip_origin -->\n                        </span>\n                        `\n\nexport const iconWithCustomText = (text,id) => {\n    const userIconMarker =      `\n                                <div class='userIconWrapper'>\n                                    <div class='material-icons userIcon icon'  id=attractionIcon${id}>\n                                        place\n                                    </div>\n                                    <span class='iconText'>\n                                        ${text}\n                                    </span>\n                                    <span className=\"iconTextWrapper\">\n                                    </span>   \n                                </div>\n                                `\n    return L.divIcon({\n        className: 'materialMapIcon',\n        html: userIconMarker,\n        iconSize: [36,36],\n        iconAnchor: [0,18]\n    })\n}\n\nexport const otmIcon = (text,id) => {\n    const markerId = `otmIcon${id}`\n    const otmMarker = `\n                    <div class='userIconWrapper'>\n                    <div class='material-icons userIcon icon otmIcon'  id=${markerId}>\n                    place</div>\n                    <span class='iconText'>${text}</span>\n                    </div>\n                    `\n                \n    return L.divIcon({\n        className: 'materialMapIcon',\n        html: otmMarker,\n        iconSize: [36,36],\n        iconAnchor: [0,18]\n    })\n}\n\nexport const editIcon  = L.divIcon({\n    className: 'materialMapIcon', \n    html:editIconMarker,\n    iconAnchor:[12,30]\n    })\n    ","import React, { Component } from 'react' \nimport L from 'leaflet';\nimport { editIcon } from '../../icons/Icons'\nimport { connect } from 'react-redux'\nimport { fillAttractionForm } from '../../store/actions/AttractionActions'\nimport { iconWithCustomText } from '../../icons/Icons'\nimport { toggleIconHoveredClass } from '../../generalFunctions'\n\nimport { toggleHoveredClass } from '../../generalFunctions'\nimport { createFindLocationButton, setMapVariable } from './mapFunctions'\n\n// handling showing map on mobile \nimport { toggleAttractionListShow } from '../../generalFunctions'\nimport { getAttractionListShown } from '../../store/actions/generalActions'\n\nconst mapsList = []; \n\nclass MyAttractionListMap extends Component {\n    state = {\n        map:\"\"\n    }\n\n    componentDidMount = () => {\n        // map must be set to this.map to access Leaflet functions \n        this.map = this.createMap()\n        // add layer to this.map so we can control the attractions that are rendered \n        this.attractionLayer = L.layerGroup().addTo(this.map)\n        // create another layer for the edit icon \n        this.editLayer = L.layerGroup().addTo(this.map)\n        setMapVariable(this.map)\n        // this.props.setMap(this.map)\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.attractions !== this.props.attractions){\n            this.renderAttractionMarkers(this.state.map)\n            this.editLayer.clearLayers();\n        }\n    }\n\n    onMapClick = e => {\n        //change what the map click does depending on the state of the MyAttractionList component \n        if (this.props.formToRender === 'new'){\n            let lat = e.latlng.wrap().lat\n            let lng = e.latlng.wrap().lng\n            console.log(`${lat} and ${lng}`)\n            fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`)\n            .then(resp => resp.json())\n            .then(data => {\n                this.props.fillAttractionForm(data.address, data.lat, data.lon)\n            }) \n            this.editLayer.clearLayers()\n            // create marker where click was \n            this.marker = L.marker([lat,lng], {icon: editIcon})\n            this.marker.addTo(this.editLayer)\n        }\n    }\n\n    renderAttractionMarkers = () => {\n        // clear the layer of attractions before rendering new attractions \n        this.attractionLayer.clearLayers()\n        // iterate through attractions in props and make markers for each attraction \n        if (this.props.attractions){\n            return this.props.attractions.map(attraction => {\n                const lat = attraction.lat \n                const lng = attraction.lng \n\n                this.marker = L.marker([lat,lng],{icon: iconWithCustomText(`${attraction.name}`,`${attraction.id}`)})\n                // set click function \n                this.marker.on('click', this.handleMarkerClick)\n                this.marker.id = attraction.id \n                // this.marker.bindPopup(this.renderPopupText(attraction)).openPopup()\n                return this.marker.addTo(this.attractionLayer)\n            })\n        }\n    }\n\n    handleMarkerClick = e => {\n        // only attempt to highlight the attraction card if on the 'list' page \n        if (this.props.formToRender === 'list'){\n            toggleIconHoveredClass(e.target.id)\n            toggleHoveredClass('AttractionListCard',e.target.id)\n            const cardId = `AttractionListCard${e.target.id}`\n            const cardToView = document.getElementById(cardId) \n            cardToView.scrollIntoView();\n        }\n        toggleAttractionListShow()\n        // tell the store whether the list is shown or not\n        this.props.getAttractionListShown()\n    }\n\n    createMap = () => {\n        const myMap = L.map('myMap').setView([35, -100], 4);\n        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n            attribution:'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            maxZoom: 20,\n            minZoom:1,\n            preferCanvas: true,\n            zoomSnap: 1,\n            zoomDelta: 0.1,\n            id: 'mapbox/streets-v11',\n            tileSize: 512,\n            zoomOffset: -1,\n            accessToken: process.env.REACT_APP_MAPBOX_API_KEY\n        }).addTo(myMap);\n\n        // create event listener for when map moves \n        // myMap.on(\"moveend\", this.onMapChange)\n        // set the state with the map's initial values \n        // this.props.parseBounds(myMap.getBounds())\n\n        L.Map.addInitHook(function () {\n            // Store a reference of the Leaflet map object on the map container,\n            // so that it could be retrieved from DOM selection.\n            // https://leafletjs.com/reference-1.3.4.html#map-getcontainer\n            mapsList.push(this)\n            this.getContainer()._leaflet_map = this;\n          });\n\n        this.setState({\n            map:myMap, \n            southWestBounds:myMap.getBounds()._southWest,\n            northEastBounds:myMap.getBounds()._northEast\n        })\n        createFindLocationButton(myMap)\n        L.control.scale().addTo(myMap);\n        myMap.on('click', this.onMapClick)\n        // this.props.setBounds(myMap.getBounds())\n        return myMap \n    }\n    render(){\n        return(\n            <div className=\"Map\">\n                <div id='myMap' className=\"map\"></div>\n            </div>\n        )\n    }\n}\nexport default connect(null, { fillAttractionForm, getAttractionListShown })(MyAttractionListMap)\n","import React, { Component } from 'react'\nimport MyAttractionListCard from '../components/attractionCards/MyAttractionListCard'\nimport EditAttractionForm from '../components/attractionCards/EditAttractionCard'\nimport NewAttractionForm from '../components/attractionCards/NewAttractionCard'\nimport MyAttractionListMap from '../components/maps/MyAttractionListMap'\n\nimport { toggleIconHoveredClass, toggleHoveredClass } from '../generalFunctions'\n\n\nimport { connect } from 'react-redux' \nimport { getMyAttractions } from '../store/actions/MapActions'\n\nclass  MyAttractionList extends Component {\n\n    state = {\n        formToRender:'list'\n    }\n\n    componentDidMount = () => {\n        this.props.getMyAttractions()\n    }\n\n    renderMyAttractions = () => {\n        if (this.props.myAttractions !== undefined){\n            return (<div> \n                {this.props.myAttractions.map(attraction => {\n                    return <MyAttractionListCard \n                        key={attraction.id} \n                        attraction={attraction} \n                        editClick={this.handleAttractionEditClick}\n                        />\n                })\n                }\n            </div>)\n    }\n}\n\n    handleAttractionEditClick = (e) => {\n        // filter through myAttractions and find the one whose ID matches the ID of the attraction clicked \n        const attractionToEdit = this.props.myAttractions.filter(attraction =>{ \n            return attraction.id === parseInt(e.target.name)\n        })\n        this.setState({\n            formToRender:'edit',\n            attractionToEdit: attractionToEdit[0]\n        })\n    }\n\n    handleNewAttractionClick = (e) => {\n        // clear the hovered class from all icons \n        toggleIconHoveredClass()\n        e.preventDefault() \n        this.setState({\n            formToRender:'new'\n        })\n    }\n\n    renderAttractionEditForm = () =>{\n            return <EditAttractionForm \n                        attraction={this.state.attractionToEdit}\n                        backToList={this.backToList}\n                    />\n    }\n\n    renderNewAttractionForm = () => {\n        return (<div className=\"newAttractionWrapper\">\n            <div>\n                Click on the map where your attraction should appear. The nearest address will populate the fields below. You can then further edit the attraction.\n                </div>\n                <NewAttractionForm \n                        backToList={this.backToList}\n                />\n                {/* <AttractionFormMap\n    \n                /> */}\n                </div>)\n    }\n\n    // create button to go back to list \n    backToList = () =>{\n        this.setState({\n            formToRender:'list'\n        })\n    }\n\n    // change if form or list is rendered depending on the state\n    renderStateForm = () =>{\n        if (this.state.formToRender === 'list'){\n            return this.renderMyAttractions()\n        } else if (this.state.formToRender === 'edit'){\n            return this.renderAttractionEditForm()\n        } else if (this.state.formToRender === 'new'){\n            return this.renderNewAttractionForm()\n        }\n    }\n    render(){\n        return(\n            <>\n                <div className=\"AttractionList\">\n                {/* only render new attraction button if at the list page  */}\n                {this.state.formToRender === 'list' ? <button onClick={this.handleNewAttractionClick}>New Attraction</button> : <></> }\n                {/* render backToList button if not on list */}\n                {this.state.formToRender !== 'list' ? <button onClick={this.backToList}>Go Back</button> : <></>}\n                    {this.renderStateForm()}    \n                </div>\n                <MyAttractionListMap \n                    formToRender={this.state.formToRender}\n                    attractions ={this.props.myAttractions}\n                />\n            </>\n    )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {myAttractions: state.map.myAttractions}\n}\n\nexport default connect(mapStateToProps, { getMyAttractions })(MyAttractionList)","const API_URL = 'https://stdm-backend.herokuapp.com/'\n// const API_URL = 'http://localhost:3000'\nexport const getUser = () => {\n    console.log('get user called ')\n    return (dispatch) => {\n        fetch(`${API_URL}/myAccount`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            }\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                dispatch({type:'GET_USER', user: data})\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\nexport const updateUser = (user,returnMessage) => {\n    return (dispatch) => {\n        fetch(`${API_URL}/users/${user.id}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            }, \n            body: JSON.stringify({user: user})\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if (data.error){\n                    returnMessage(data)\n                }else{\n                    dispatch({type:'UPDATE_USER', user:data.user})\n                    returnMessage(data)\n                }\n                // dispatch({type:'UPDATE_USER', user: data})\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\nexport const updatePassword = (user, returnMessage) => {\n    const userInfo = {\n        id:user.id, \n        current_password:user.password, \n        password:user.new_password, \n        password_confirmation: user.password_confirmation\n    }\n    return (dispatch) => {\n        fetch(`${API_URL}/updatePassword/`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            }, \n            body: JSON.stringify({user:userInfo})\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if (data.error){\n                    returnMessage(data)\n                }else{\n                    dispatch({type:'UPDATE_PASSWORD'})\n                    returnMessage(data)\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\n\nexport const updateEmail = (email, returnMessage) => {\n    return (dispatch) => {\n        fetch(`${API_URL}/updateEmail/`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            }, \n            body: JSON.stringify({user:email})\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if (data.error){\n                    returnMessage(data)\n                }else{\n                    returnMessage(data)\n                    dispatch({type:'UPDATE_EMAIL', email:data.email})\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\nexport const deleteUser = (user,returnMessage) => {\n    console.log({user})\n    return (dispatch) => {\n        fetch(`${API_URL}/users/${user.id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            },\n            body: JSON.stringify({user})\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if (data.error){\n                    returnMessage(data)\n                }else{\n                    dispatch({type:'DELETE_USER', user: data})\n                    returnMessage(data)\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport { updatePassword } from '../../store/actions/UserActions'\nimport { ServerResponseCard } from '../ServerResponseCard'\n\nclass EditPassword extends Component {\n        state={\n            user:{}, \n            returnMessage:\"\"\n        }\n    // function for getting the message back from updating information \n    returnMessage = message => {\n        this.setState({\n            returnMessage:message\n        })\n    }\n    \n    handleInput = e =>{\n        e.preventDefault()\n        this.setState({\n            ...this.state,\n            user:{\n                ...this.state.user,\n                [e.target.name]:e.target.value\n            } \n        })\n    }\n    renderChangePasswordForm = () =>{\n        return (\n            <>\n            <label>Change Password</label>\n            <div className=\"informationBox MyAccount__child\">\n                <form>\n                    <label>Current Password: </label>\n                    <br></br>\n                <input  name='password' \n                        type='password'\n                        value={this.state.user.password || ''}\n                        onChange={this.handleInput}>\n                </input>\n                        <br></br>\n                <label>New Password: </label>\n                <br></br>\n                <input  name='new_password' \n                        type='password'\n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Confirm New Password: </label>\n                <br></br>\n                <input  name='password_confirmation' \n                        type='password'\n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <ServerResponseCard response={this.state.returnMessage} />\n                <button \n                    type='submit'\n                    onClick={this.handleUpdatePasswordSubmit}\n                    >Change Password</button>\n                </form>\n            </div>\n            </>\n        )\n    }\n\n    handleUpdatePasswordSubmit = e => {\n        e.preventDefault() \n        const dataToSubmit = {\n            ...this.state.user,\n            id:this.props.userId\n        }\n        console.log(dataToSubmit)\n        this.props.updatePassword(dataToSubmit, this.returnMessage)\n    }\n\n    render(){\n        return ( \n            <> \n                {this.renderChangePasswordForm()}\n            </>\n        )\n    }\n}\n\nexport default connect(null, {updatePassword})(EditPassword)","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport { updateEmail, getUser } from '../../store/actions/UserActions'\nimport { ServerResponseCard } from '../ServerResponseCard'\nclass EditEmail extends Component {\n        state={\n            returnMessage:\"\",\n            email:''\n        }\n\n    // function for getting the message back from updating information \n    returnMessage = message => {\n        this.setState({\n            returnMessage:message\n        })\n    }\n    \n    handleInput = e =>{\n        e.preventDefault()\n        this.setState({\n            ...this.state,\n            email:{\n                ...this.state.email, \n                [e.target.name]:e.target.value\n            }\n        })\n    }\n    renderUpdateEmailForm = () =>{\n        return(\n            <>\n            <label>Update Email Address</label>\n            <div className=\"informationBox MyAccount__child\">\n                <form className=\"\">\n                <label>Current Email Address</label>\n                <label> - {this.props.currentEmail}</label>\n                <br></br>\n                    <label>New Email: </label>\n                    <br></br>\n                    <input  name='new_email' \n                            // value={this.state.email || ''} \n                            onChange={this.handleInput}>\n                    </input>\n                    <br></br>\n                    <label>Confirm New Email: </label>\n                    <br></br>\n                    <input  name='email_confirmation' \n                            // value={this.state.email_confirmation || ''} \n                            onChange={this.handleInput}>\n                    </input>\n                    <br></br>\n                    <label>*Current Password: </label>\n                <br></br>\n                <input  name='current_password' \n                        type='password'\n                        // value={this.state.user.password || ''}\n                        onChange={this.handleInput}>\n                </input>\n                        <br></br>\n\n                <ServerResponseCard response={this.state.returnMessage} />\n                <button \n                    type='submit'\n                    onClick={this.handleUpdateEmailSubmit}\n                    >Update Email Address</button>\n                </form>\n            </div>\n            </>\n        )\n    }\n\n    handleUpdateEmailSubmit = e => {\n        e.preventDefault() \n        const dataToSubmit = {\n            ...this.state.email,\n            id:this.props.userId\n        }\n        console.log(dataToSubmit)\n        this.props.updateEmail(dataToSubmit, this.returnMessage)\n        // run getUser so user info updates in the store and current email updates above \n        this.props.getUser()\n    }\n\n    render(){\n        return ( \n            <>\n                {this.renderUpdateEmailForm()}\n            </>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        currentEmail:state.user.user.email\n    }\n}\nexport default connect(mapStateToProps, {updateEmail, getUser })(EditEmail)","import React, { Component } from 'react' \nimport { connect } from 'react-redux' \nimport {  updateUser } from '../../store/actions/UserActions'\nimport { ServerResponseCard } from '../ServerResponseCard'\n\nclass EditInfo extends Component {\n    state = {\n        user:this.props.user,\n        returnMessage:\"\"\n    }\n\n    componentDidUpdate = (prevProps) =>{\n        if (prevProps.user !== this.props.user && this.state.receivedProps !== true){\n            console.log('user info updated')\n            this.setState({\n                user:this.props.user,\n                receivedProps:true\n            })\n        }\n    }\n    // function for getting the message back from updating information \n    returnMessage = message => {\n        // debugger\n        this.setState({\n            returnMessage:message\n        })\n    }\n    \n    handleInput = e =>{\n        e.preventDefault()\n        this.setState({\n            ...this.state,\n            user:{\n                ...this.state.user, \n                [e.target.name]:e.target.value\n            }\n        })\n    }\n\n    handleUpdateInfoSubmit = e => {\n        e.preventDefault() \n        const dataToSubmit = {\n            ...this.state.user\n        }\n        console.log(dataToSubmit)\n        this.props.updateUser(dataToSubmit, this.returnMessage)\n    }\n\n    renderUpdateInfoForm = () => {\n        return (\n            <>\n            <label>Update Account Information</label>\n            <div className=\"informationBox MyAccount__child\">\n            <form className=\"\">\n                <label>First Name: </label>\n                <br></br>\n                <input  \n                    name='first_name' \n                    value={this.state.user.first_name || \"\"} \n                    onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Last Name: </label>\n                <br></br>\n                <input  name='last_name' \n                        value={this.state.user.last_name || \"\"} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Username: </label>\n                <br></br>\n                <input  name='username' \n                        value={this.state.user.username || \"\"} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>City: </label>\n                <br></br>\n                <input  name='city' \n                        value={this.state.user.city || \"\"} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>State: </label>\n                <br></br>\n                <input  name='state' \n                        value={this.state.user.state || \"\"} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Country: </label>\n                <br></br>\n                <input  name='country' \n                        value={this.state.user.country || \"\"} \n                        onChange={this.handleInput}>\n                </input>\n                <br></br>\n                <label>Current Password: </label>\n                <br></br>\n                <input  name='password' \n                        type='password'\n                        value={this.state.user.password || \"\"}\n                        onChange={this.handleInput}>\n                </input>\n                        <br></br>\n                {/* <div>{this.state.returnMessage}</div> */}\n                <ServerResponseCard response={this.state.returnMessage} />\n                <button \n                    // type='submit'\n                    onClick={this.handleUpdateInfoSubmit}\n                    >Update Account Information</button>\n            </form>\n            </div>\n            </>\n        )\n    }\n    render(){\n        return ( \n            <> \n                {this.renderUpdateInfoForm()}\n            </>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        user:state.user.user\n    }\n}\nexport default connect(mapStateToProps, { updateUser })(EditInfo)","import React, {Component} from 'react' \nimport { connect } from 'react-redux' \nimport { deleteUser } from '../../store/actions/UserActions'\nimport { withRouter } from 'react-router'\nimport { ServerResponseCard } from '../ServerResponseCard'\n\n\n\nclass DeleteAccount extends Component {\n    state = {\n        password:'',\n        save_attractions:null,\n        // save_reviews:null,\n        returnMessage:\"\"\n    }\n\n    // redirect to login if deletion was successful \n    componentDidUpdate = () =>{\n        if (this.state.returnMessage.success){\n            localStorage.clear()\n            this.props.history.push('/login')\n        }\n    }\n\n    // function for getting the message back from updating information \n    returnMessage = message => {\n        this.setState({\n            returnMessage:message\n        })\n    }\n\n    handleInput = e =>{\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n\n    handleKeepAttractionsSelect = (e) => {\n        e.target.value === 'yes' \n        ?\n        this.setState({\n            save_attractions:true\n        })\n        :\n        this.setState({\n            save_attractions:false\n        })\n    }\n\n    renderPasswordInputs = () => {\n        return (\n            <>\n                <label>Password: </label>\n                <input  name='password' \n                type='password'\n                value={this.state.password || ''}\n                onChange={this.handleInput}>\n                </input>\n            </>\n        )\n    }\n\n    renderUserChoice = () =>{\n        if (this.state.save_attractions === true){\n            return (<div>Yes, save my attractions for others to see!</div>)\n        } else if (this.state.save_attractions === false){\n            return (<div>No, I want to delete all my attractions along with my account!</div>)\n        }\n    }\n\n    renderKeepAttractionsSelect = () =>{\n        return(\n            <div>\n                <div>Would you like to keep the attractions or reviews you have published for others to continue to see?</div>\n                <button value='yes' onClick={this.handleKeepAttractionsSelect}>Yes</button>\n                <button value='no' onClick={this.handleKeepAttractionsSelect}>No</button>\n                {/* keep attractions select */}\n            </div>\n        )\n    }\n\n    renderDeleteAccountButton = () => {\n        return( \n            <button\n                onClick={this.handleDeleteAccountSubmit}\n            >Delete Account</button>\n        )\n    }\n\n    handleDeleteAccountSubmit = (e) =>{\n        e.preventDefault()\n        const user = {\n            id:this.props.userId,\n            password:this.state.password, \n            save_attractions:this.state.save_attractions\n        }\n        this.props.deleteUser(user,this.returnMessage)\n    }\n    render(){\n        return(\n            <>\n                <label>Delete Account</label>\n            <div className=\"informationBox MyAccount__child\">\n                    {this.renderKeepAttractionsSelect()}\n                    {this.renderUserChoice()}\n                    {this.renderPasswordInputs()}\n                    <ServerResponseCard response={this.state.returnMessage} />\n                    {this.renderDeleteAccountButton()}\n            </div>\n            </>\n\n        )\n    }\n}\n\nexport default withRouter(connect(null,{ deleteUser })(DeleteAccount))","import React from 'react' \nimport EditPassword from './EditPassword'\nimport EditEmail from './EditEmail'\nimport EditInfo from './EditInfo'\nimport DeleteAccount from './DeleteAccount'\n\n\n\nimport { connect } from 'react-redux'\nconst MyAccount = (props) => { \n        return( \n            <div className=\"MyAccount\">\n                <EditInfo />\n                <EditPassword userId={props.user.id}/>\n                <EditEmail userId={props.user.id}/>\n                <DeleteAccount userId={props.user.id}/>\n            </div>\n        )\n}\nconst mapStateToProps = state => {\n    return {user: state.user.user}\n}\nexport default connect(mapStateToProps)(MyAccount)","import React,{Component} from 'react' \nimport { toggleIconHoveredClass } from '../../generalFunctions'\nimport { renderAddress, renderRating } from './attractionCardGeneralFunctions'\n\n\nconst cardClass = \"AttractionListCard animated fadeIn\"\n\nclass AttractionMapListCard extends Component{\n    \n    cardClick = () => {\n            this.props.onClick(this.props.attraction)\n            toggleIconHoveredClass(this.props.attraction.id)\n    }\n    \n    render(){\n        return (\n            <div \n            id={`attractionMapListCard${this.props.attraction.id}`}\n            // feed the attraction's id back on click so the attraction list can fetch it and render its info  \n            // onClick={()=>toggleHoveredClass(this.props.attraction.id)}\n            onClick={this.cardClick}\n            className={cardClass}>\n            <h4 className=\"name\">{this.props.attraction.name}</h4>\n            {renderRating(this.props.attraction)}\n            {renderAddress(this.props.attraction)}\n            <p className=\"description\">{this.props.attraction.description}</p>\n        </div>)\n        }\n}\n\nexport default AttractionMapListCard","import React from 'react' \nimport {connect} from 'react-redux'\nimport Button from '../general/Button'\nimport { deleteReview } from '../../store/actions/ReviewActions'\n\n\n\nconst ReviewCard = props => {\n    return(\n        <div className=\"ReviewCard \">\n            <span>{props.review.user_first_name} {props.review.user_last_name} said:</span>\n            <span className=\"reviewDate\">{props.review.created_at}</span>\n            <p>{props.review.rating}<span role=\"img\" aria-label=\"star\">⭐️</span></p>\n            <p>{props.review.text}</p>\n            {props.user_id === props.review.user_id\n            ?\n            <Button name=\"\" text=\"Delete\" onClick={() => props.deleteReview(props.review)}/>\n            :\n            <></>\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state =>{\n    return {\n        user_id:state.user.user.id\n    }\n}\nexport default connect(mapStateToProps, { deleteReview })(ReviewCard)","const API_URL = 'https://stdm-backend.herokuapp.com/'\n// const API_URL = 'http://localhost:3000'\n\nexport const addReview = (review, returnMessage) => {\n    return (dispatch) => {\n        fetch(`${API_URL}/reviews/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            },\n            body: JSON.stringify(review),\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            console.log(data)\n            if (data.error){\n                returnMessage(data)\n            }else{\n                returnMessage(data)\n                dispatch({type:'ADD_REVIEW', attraction:data.attraction})\n            }\n        })\n    }\n}\n\nexport const deleteReview = (review) => {\n    // debugger\n    return (dispatch) => {\n        fetch(`${API_URL}/reviews/${review.id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Token': localStorage.auth_token\n            },\n            body: JSON.stringify(review)\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            console.log(data)\n            if (data.error){\n            }else{\n                dispatch({type:'DELETE_REVIEW', attraction:data.attraction})\n            }\n        })\n    }\n}\n\n","import React from 'react' \nimport ReviewCard from '../components/reviewCards/ReviewCard'\n// import { connect } from 'react-redux'\n\nconst styleClasses = \"ReviewList informationBox\"\n\nconst ReviewList = props => {\n    console.log(props)\n    return( \n        <div className={styleClasses}>\n            {props.attraction.reviews.map(review => {\n                return <ReviewCard attraction={props.attraction} review={review} key={review.id}/>\n            })}\n        </div>\n    )\n}\n\nexport default ReviewList","import React, { Component } from 'react' \nimport {connect} from 'react-redux' \nimport { addReview } from '../../store/actions/ReviewActions'\nimport { ServerResponseCard } from '../ServerResponseCard'\n\nclass WriteReviewCard extends Component {\n    state = {\n        text:'', \n        rating:'', \n        returnMessage:''\n    }\n    handleInput = e =>{\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n\n    handleOptionSelect = e => {\n        this.setState({\n            rating: e.target.value\n        })\n    }\n\n    renderNotLoggedIn = () =>{\n        if (!this.props.loggedIn){\n            return <div>You must be logged in to leave a review</div>\n        }\n    }\n\n    renderReturnMessage = () => {\n        return( \n            <div>{this.state.returnMessage}</div>\n        )\n    }\n\n    returnMessage = message => {\n        this.setState({\n            returnMessage:message\n        })\n    }\n\n    componentDidUpdate = () => {\n        if (this.state.returnMessage.success){\n            this.setState({\n                returnMessage:\"\",\n                text:\"\"\n            })\n            this.clearWriteReviewArea()\n        }\n    }\n\n    submitReview = (e) => {\n        e.preventDefault();\n        const review = {\n            // format object keys the Ruby way (snake case)\n            attraction_id: this.props.attractionId, \n            text: this.state.text, \n            rating: this.state.rating \n        }\n        // submit review and get return message to show \n        this.props.addReview(review,this.returnMessage)\n    }\n\n    clearWriteReviewArea = () =>{\n        console.log('write review fired')\n        const textArea = document.getElementById('writeReviewTextArea')\n        textArea.value = ''\n        const reviewRatingOptionSelect = document.getElementById('rating')\n        reviewRatingOptionSelect.value = ''\n    }\n\n    renderWriteReview = () => {\n        return ( \n            <form className=\"WriteReviewCard\">\n                {/* <br></br> */}\n                <label>Write Review</label>\n                <span className=\"ratingSelect\">\n                    <label>Rating</label>\n                    <select name=\"rating\" onChange={this.handleOptionSelect} id='rating'>\n                        <option className=\"ratingSelectOption\" name=\"rating\" defaultValue value=\"\"></option>\n                        <option name=\"rating\" value=\"1\">1</option>\n                        <option name=\"rating\" value=\"2\">2</option>\n                        <option name=\"rating\" value=\"3\">3</option>\n                        <option name=\"rating\" value=\"4\">4</option>\n                        <option name=\"rating\" value=\"5\">5</option>\n                        <option name=\"rating\" value=\"6\">6</option>\n                        <option name=\"rating\" value=\"7\">7</option>\n                        <option name=\"rating\" value=\"8\">8</option>\n                        <option name=\"rating\" value=\"9\">9</option>\n                        <option name=\"rating\" value=\"10\">10</option>\n                    </select>\n                </span>\n                <textarea\n                    className=\"informationBox writeReviewText\"\n                    name=\"text\"\n                    onChange={this.handleInput}\n                    id=\"writeReviewTextArea\"\n                ></textarea>\n                <br></br>\n                <ServerResponseCard response={this.state.returnMessage} />\n                <button\n                    onClick={this.submitReview}\n                >Submit Review</button>\n            </form>\n        )\n    }\n\n    render(){\n        return(\n            <div>\n            {this.props.loggedIn\n            ?\n            this.renderWriteReview()\n            :\n            this.renderNotLoggedIn()\n            }\n        </div>\n        )\n    }\n\n}\nconst mapStateToProps = state =>{\n    return state={\n        loggedIn:state.user.loggedIn\n    }\n}\n\nexport default connect(mapStateToProps, { addReview })(WriteReviewCard)","import React, { Component } from 'react' \nimport { connect } from 'react-redux'\nimport { getAttraction } from '../../store/actions/AttractionActions'\nimport ReviewList from '../../containers/ReviewList'\nimport WriteReviewCard from '../reviewCards/WriteReviewCard'\n\n\nimport { renderAddress, renderRating } from './attractionCardGeneralFunctions'\n\nconst cardClass = \"AttractionListCardLarge animated\"\n\nclass AttractionListCardLarge extends Component {\n\n    componentDidMount = () => {\n        // scroll this card into view upon mounting \n        const thisCard = document.getElementById(`attractionMapListCardLarge${this.props.attraction.id}`)\n        thisCard.scrollIntoView()\n    }\n\n    renderReviewList = (attraction) => {\n        if (attraction.reviews.length < 1){\n        }else{\n            return(\n                <>\n                    <label>Reviews</label>\n                    <ReviewList attraction={attraction} />\n                </>\n            ) \n        }\n    }\n\n    renderWriteReviewCard = () => {\n        return <WriteReviewCard attractionId={this.props.attraction.id}/>\n    }\n\n    renderBackButton = () => {\n        return (\n            <button onClick={this.props.backClick}>Back</button>\n        )\n    }\n\n    renderAddress = (attraction) =>{\n        return (\n            <span className=\"address\">\n                {`${attraction.house_number || ''} ${attraction.road || ''}, ${attraction.city || ''}, ${attraction.state || ''}, ${attraction.country || ''}`}\n            </span>\n        )\n    }\n\n    render(){\n        return (\n        <div className={cardClass} id={`attractionMapListCardLarge${this.props.attraction.id}`}>\n            <div className=\"AttractionListCardLargeInner\">\n                <br></br>\n                <h4 className=\"name\">{this.props.attraction.name}</h4>\n                {renderRating(this.props.attraction)}\n                {renderAddress(this.props.attraction)}\n                <p className=\"description\">{this.props.attraction.description}</p>\n                {this.renderReviewList(this.props.attraction)}\n            {this.renderWriteReviewCard()}\n            </div>\n        </div>)\n    }\n}\nconst mapStateToProps = state => {\n    return state = {\n        attraction:state.attraction.attraction\n    }\n}\nexport default connect(mapStateToProps, {getAttraction})(AttractionListCardLarge)","import React from 'react' \nimport { connect } from 'react-redux'\nconst cardClass = \"AttractionListCard animated fadeIn\"\n\n\nconst OTMAttractionCardSmall = props => {\n    return( \n        <div \n            // wikidata={attraction.properties.wikidata}\n            className={cardClass}\n            key={props.attraction.id}\n            id={`otmAttractionCardSmall${props.attraction.properties.xid}`}\n            // git attraction list access to the wikidata id it needs to look up info \n            onClick={()=>props.onClick(props.attraction.properties.xid)}\n        >\n            <h4 className=\"name\">{props.attraction.properties.name}</h4>\n            <span className=\"osmRating\"> - {props.attraction.properties.rate}⭐️</span>\n        </div>\n    )\n}\nexport default connect(null, { })(OTMAttractionCardSmall)","// general functions for finding OTM listings. Keeping here to keep MapPage clean. \n// const OTMAPIKey = process.env.REACT_APP_OTM_API_KEY\n\n// export const fetchWikiData = (wikidataId,thenFunction) => {\n//     const WikiDataURL = createWikiDataURL(wikidataId)\n//     fetch(WikiDataURL)\n//     .then(resp => resp.json())\n//     .then(data => {\n//         // console.log(data)\n//         thenFunction(data)\n//     })\n// }\n\n// export const createOTMURL = (latMin,latMax,lngMin,lngMax) => {\n//     return `https://api.opentripmap.com/0.1/en/places/bbox?lon_min=${lngMin}&lon_max=${lngMax}&lat_min=${latMin}&lat_max=${latMax}&kinds=historical_places&src_attr=wikidata&apikey=${OTMAPIKey}`\n// }\n// export const createWikiDataURL = (xid)=>{\n//     return `https://api.opentripmap.com/0.1/en/places/xid/${xid}?apikey=${OTMAPIKey}`\n// }\n\n// export const fetchOTMData = (attractionBounds, thenFunction) => {\n//     const latMin = attractionBounds.south;  \n//     const latMax = attractionBounds.north; \n//     const lngMin = attractionBounds.west;\n//     const lngMax = attractionBounds.east;\n//     const OTMURL = createOTMURL(latMin,latMax,lngMin,lngMax)\n//     let returnData = fetch(OTMURL)\n//     .then(resp => resp.json())\n//     .then(data => {\n//         thenFunction(data.features)\n//     }).catch((error)=>{\n//         console.log(error)\n//     })\n//     return returnData\n// }\n\n// export const fetchOTMData = (attractionBounds, thenFunction) => {\n//     const latMin = attractionBounds.south;  \n//     const latMax = attractionBounds.north; \n//     const lngMin = attractionBounds.west;\n//     const lngMax = attractionBounds.east;\n//     const OTMURL = createOTMURL(latMin,latMax,lngMin,lngMax)\n//     let returnData = fetch(OTMURL)\n//     .then(resp => resp.json())\n//     .then(data => {\n//         thenFunction(data.features)\n//     }).catch((error)=>{\n//         console.log(error)\n//     })\n//     return returnData\n// }\n\nconst API_URL = 'https://stdm-backend.herokuapp.com/'\n\nexport const fetchOTMData = (attractionBounds, thenFunction) => {\n    fetch(`${API_URL}otm_attractions`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json', \n            'south': attractionBounds.south,\n            'north': attractionBounds.north,\n            'east': attractionBounds.east, \n            'west': attractionBounds.west\n        }, \n    })\n    .then(resp => resp.json())\n    .then((data) => {\n        console.log(data)\n        thenFunction(data.features)\n    })\n    .catch((error) => {\n        console.error('Error:', error);\n    });\n}\n    \nexport const fetchWikiData = (wikidataId,thenFunction) => {\n    // const WikiDataURL = createWikiDataURL(wikidataId)\n    fetch(`${API_URL}/fetchWikidata`, {\n        method: 'GET',\n        headers: {\n            'xid':wikidataId\n        },\n    })\n    .then(resp => resp.json())\n    .then(data => {\n        // console.log(data)\n        thenFunction(data)\n    })\n}","import React,{ Component } from 'react' \nimport { fetchWikiData } from '../../otmFunctions'\n\nimport { renderAddress } from './attractionCardGeneralFunctions'\nimport { scrollElementIntoViewById } from '../../generalFunctions'\n\n\n\n\nclass OTMAttractionCardLarge extends Component {\n    state = {\n        wikidata:'',\n        scrollIntoView:false\n    }\n    // get data back from wikidata listing, then use it to render this card \n    componentDidMount = () => {\n        fetchWikiData(this.props.xid,this.setWikidata)\n        console.log(this.props)\n    }\n    \n    componentDidUpdate = () => {\n        console.log('updated')\n        if (this.state.scrollIntoView === false){\n            scrollElementIntoViewById(`otmAttractionCardLarge${this.state.wikidata.xid}`)\n            this.setState({\n                scrollIntoView:true\n            })\n            // console.log(this.state.scrollIntoView)\n            // const thisCard = document.getElementById(`otmAttractionCardLarge${this.props.xid}`)\n            // thisCard.scrollIntoView()\n            // this.setState({\n            //     scrollIntoView:true\n            // })\n        }        \n    }\n\n\n    setWikidata = data =>{\n        this.setState({\n            wikidata:data\n        })\n    }\n\n    renderWikipediaData = data =>{\n        // debugger\n        if (data !== undefined && data.text !== undefined){\n            return(\n                <p>\n                    {data.text}\n                </p>\n            )\n        }\n    }\n\n    renderImage = data => {\n        if (data.preview){\n            return (\n                <img className=\"otmImage\" src={data.preview.source}></img>\n            )\n        } else {\n            return (\n                <p>No Image Available</p>\n            )\n        }\n    }\n\n    renderCardData = wikidata => {\n        if (wikidata !== ''){\n            console.log(this.state.wikidata)\n            const divToRender = \n                <div \n                className={'otmAttractionCard'}\n                id={`otmAttractionCardLarge${this.state.wikidata.xid}`}\n                >\n                <div className={'otmAttractionCardDetails'}>\n                    <h4 className=\"name\">{this.state.wikidata.name}</h4>                \n                    {/* <br></br> */}\n                    {renderAddress(wikidata.address)}\n                </div>\n                {this.renderImage(wikidata)}\n                {this.renderWikipediaData(wikidata.wikipedia_extracts)}\n                {/* <p>{wikidata.wikipedia_extracts.text}</p> */}\n                \n                {/* {wikidata.properties.name} */}\n                </div>\n            return (\n                divToRender\n            )\n            \n        }\n    }\n\n    render(){\n        \n        return( \n            <>  \n            {this.renderCardData(this.state.wikidata)}\n        </>\n    )}\n}\n\nexport default OTMAttractionCardLarge","import React from 'react' \n\nconst AttractionListHeader = props => {\n    let headerText, listCount, onClick, id, list; \n    if (props.type === 'user'){\n        headerText = \"User Attractions\"; \n        id = 'user'; \n        list = 'attractionList';\n        listCount = props.listCount; \n        onClick = () =>{\n            const attractionList = document.getElementById('attractionList'); \n            attractionList.hidden = !attractionList.hidden; \n        };\n    }else{\n        headerText = \"Historical Districts\"\n        id = 'otm'; \n        list = 'otmAttractionList'\n        listCount = props.listCount; \n        onClick = () =>{\n            const otmAttractionList = document.getElementById('otmAttractionList'); \n            otmAttractionList.hidden = !otmAttractionList.hidden; \n        }\n    }\n\n\n    return (\n        <div \n            className = {'listHeader'}\n            onClick={onClick}\n            id={`${id}AttractionsHeader`}\n            list={list}\n        >\n            {headerText} ({listCount})\n        </div>\n    )\n}\n\nexport default AttractionListHeader;","import React, { Component } from 'react' \nimport { connect } from 'react-redux'\nimport AttractionMapListCard from '../components/attractionCards/AttractionMapListCard'\nimport AttractionListCardLarge from '../components/attractionCards/AttractionListCardLarge'\nimport { getAttraction } from '../store/actions/AttractionActions'\nimport { highlightAttraction } from '../store/actions/MapActions'\nimport { toggleHoveredClass } from '../generalFunctions'\nimport  OTMAttractionCardSmall from '../components/attractionCards/OTMAttractionCardSmall'\nimport OTMAttractionCardLarge from '../components/attractionCards/OTMAttractionCardLarge'\nimport AttractionListHeader from './AttractionListHeader'\n\n\nclass AttractionList extends Component {   \n    state = {\n        attractions:this.props.attractions,\n        selectedOTMAttractionId:'',\n        selectedOTMXid:''\n    }\n\n    // render a header for attraction list for either user or OTM listings\n    renderAttractionsListHeader = (type) => {\n        if (type === 'user'){\n            return (\n                    <AttractionListHeader\n                        type={type}\n                        listCount={this.props.attractions.length}\n                    ></AttractionListHeader>\n                    )\n        }else{\n            return (\n                    <AttractionListHeader\n                        type={type}\n                        listCount={this.props.otmAttractions.length}\n                    ></AttractionListHeader>\n            )\n        }\n    }\n\n    toggleAttractionListHidden = (e) => {\n        // find the attraction list and toggle its hidden. \n        const attractionList = document.getElementById('attractionList'); \n        attractionList.hidden = !attractionList.hidden; \n    }\n\n    toggleOTMAttractionListHidden = (e) => {\n        e.preventDefault()\n        console.log(e);\n        console.log(e.target.props);\n\n        // find the OTM attraction list and toggle its hidden. \n        const otmAttractionList = document.getElementById('otmAttractionList'); \n        otmAttractionList.hidden = !otmAttractionList.hidden; \n    }\n\n    renderAttractionCards = () => {\n        if (this.props.attractions !== undefined){\n            return this.props.attractions.map(attraction => {\n                if (attraction.id === this.props.attraction.id){\n                    return <AttractionListCardLarge\n                                key={attraction.id}\n                                attraction={this.props.attraction}\n                            />\n                }else{\n                    return <AttractionMapListCard \n                    key={attraction.id} \n                    attraction={attraction}\n                    onClick={this.attractionCardClick}\n                    /> \n                }\n            })\n        }\n    }\n\n    renderOTMAttractionCards = () => {\n        if (this.props.otmAttractions !== \"\" && this.props.otmAttractions !== undefined){\n            return this.props.otmAttractions.map(attraction => {\n                // render large card if ids match \n                if (attraction.properties.xid === this.props.highlightAttractionId){\n                    return (\n                        <OTMAttractionCardLarge \n                            xid={attraction.properties.xid}\n                            key={attraction.properties.xid}\n                        />\n\n                        )\n                }else{\n                    return(\n                        <OTMAttractionCardSmall \n                            attraction={attraction} \n                            onClick={this.otmAttractionCardClick}\n                            key={attraction.properties.xid}\n                        />\n                        ) \n                }\n            })\n        }\n    }\n\n    // on click, fetch attraction's info, then render a big card for that attraction \n    attractionCardClick = (e)=> {\n        this.props.getAttraction(e.id)\n    }\n\n    otmAttractionCardClick = (xid) => {\n        // select the otm attraction to be highlighted \n        this.props.highlightAttraction(xid)\n        toggleHoveredClass('otmIcon',xid)\n    }\n\n    backToAttractionListClick = (e) => {\n        e.preventDefault()\n        this.setState({\n            attractionCardLargeToRender:\"\"\n        })\n    }\n    render(){\n        return(\n        <div className=\"AttractionList\" \n        >\n            {this.renderAttractionsListHeader('user')}\n            <div id=\"attractionList\" hidden={true}>\n                {this.renderAttractionCards()}\n            </div>\n            {this.renderAttractionsListHeader('otm')}\n            <div id='otmAttractionList' \n                // hidden={true}\n            >\n                {this.renderOTMAttractionCards()}\n            </div>\n        </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n            attractions: state.map.attractions,\n            attraction:state.attraction.attraction,\n            highlightAttractionId:state.map.highlightAttraction\n            }\n}\nexport default connect(mapStateToProps, { getAttraction, highlightAttraction })(AttractionList)","import React, { Component } from 'react' \nimport L from 'leaflet';\nimport { connect } from 'react-redux'\nimport { iconWithCustomText, otmIcon } from '../../icons/Icons'\nimport { getAttraction } from '../../store/actions/AttractionActions'\nimport { toggleIconHoveredClass, toggleHoveredClass, scrollElementIntoView, scrollElementIntoViewById } from '../../generalFunctions'\nimport { highlightAttraction } from '../../store/actions/MapActions'\nimport { createFindLocationButton } from './mapFunctions'\nimport { toggleAttractionListShow } from '../../generalFunctions'\n\nimport { getAttractionListShown } from '../../store/actions/generalActions'\n\n\n\nclass Map extends Component {\n    state = {\n        map:\"\",\n        southWestBounds:'', \n        northEastBounds:''\n    }\n\n    componentDidMount = () => {\n        // map must be set to this.map to access Leaflet functions \n        this.map = this.createMap()\n        // add layer to this.map so we can control the attractions that are rendered \n        this.attractionLayer = L.layerGroup().addTo(this.map)\n        this.otmLayer = L.layerGroup().addTo(this.map)\n        // get user location and set view to it \n        // this.map.locate({setView:true, enableHighAccuracy:true})\n    }\n\n    renderAttractionMarkers = () => {\n        // clear the layer of attractions before rendering new attractions \n        this.attractionLayer.clearLayers()\n        // iterate through attractions in props and make markers for each attraction \n        if (this.props.attractions){\n            return this.props.attractions.map(attraction => {\n                const lat = attraction.lat \n                const lng = attraction.lng \n                this.marker = L.marker([lat,lng],{icon: iconWithCustomText(`${attraction.name}`,`${attraction.id}`)})\n                // set click function \n                this.marker.on('click', this.handleMarkerClick)\n                this.marker.id = attraction.id \n                // this.marker.bindPopup(this.renderPopupText(attraction)).openPopup()\n                return this.marker.addTo(this.attractionLayer)\n            })\n        }\n    }\n\n    renderOTMMarkers = () => {\n        this.otmLayer.clearLayers();\n            if (this.props.otmAttractions){\n                console.log(this.props.otmAttractions)\n            return this.props.otmAttractions.map(attraction => {\n                // console.log(attraction)\n                // debugger\n                // create variables to feed to marker creation function \n                const name = attraction.properties.name \n                const lng = attraction.geometry.coordinates[0]\n                const lat = attraction.geometry.coordinates[1]\n                const xid = attraction.properties.xid \n                // const wikidata = attraction.wikidata\n                let marker = L.marker([lat,lng], {icon:otmIcon(`${name}`,`${xid}`)})\n                marker.on('click',this.handleOTMMarkerClick)\n                marker.id = xid; \n                return marker.addTo(this.otmLayer)\n            })\n        }\n    }\n\n    handleMarkerClick = e => {\n        this.props.getAttraction(e.target.id)\n        // unhide attractionList div \n        const attractionList = document.getElementById('attractionList'); \n        if (attractionList.hidden){\n            attractionList.hidden = false; \n        }\n        toggleIconHoveredClass(e.target.id)\n        this.props.highlightAttraction(e.target.id)\n        toggleAttractionListShow()\n        // tell the store whether the list is shown or not\n        this.props.getAttractionListShown()\n    }\n\n    handleOTMMarkerClick = e => {\n        console.log(e.target.id)\n        const otmAttractionList = document.getElementById('otmAttractionList'); \n        if (otmAttractionList.hidden){\n            otmAttractionList.hidden = false; \n        }\n        toggleIconHoveredClass(e.target.id)\n        this.props.highlightAttraction(e.target.id)\n        \n        // scrollElementIntoView('otm',e.target.id)\n        scrollElementIntoViewById(`otmAttractionCardLarge${e.target.id}`)\n        toggleAttractionListShow()\n        // tell the store whether the list is shown or not\n        this.props.getAttractionListShown()\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps !== this.props){\n            this.renderAttractionMarkers(this.state.map)\n            this.renderOTMMarkers()\n        }\n    }\n    \n    onMapChange = (e) => {\n        const bounds = e.target.getBounds() \n        this.setState({\n            ...this.state, \n            southWestBounds:bounds._southWest, \n            northEastBounds:bounds._northEast\n        })\n        this.props.setBounds(bounds)\n        this.renderOTMMarkers()\n    }\n\n\n    createMap = () => {\n        const myMap = L.map('myMap').setView([33.74884399533138, -84.36997083332154], 14);\n        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n            attribution:'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            maxZoom: 20,\n            minZoom:1,\n            preferCanvas: true,\n            zoomSnap: 1,\n            zoomDelta: 0.1,\n            id: 'mapbox/streets-v11',\n            tileSize: 512,\n            zoomOffset: -1,\n            accessToken: process.env.REACT_APP_MAPBOX_API_KEY\n        }).addTo(myMap);\n\n        // create event listener for when map moves \n        myMap.on(\"moveend\", this.onMapChange)\n        // set the state with the map's initial values \n        // this.props.parseBounds(myMap.getBounds())\n        this.setState({\n            map:myMap, \n            southWestBounds:myMap.getBounds()._southWest,\n            northEastBounds:myMap.getBounds()._northEast\n        })\n        createFindLocationButton(myMap)\n        L.control.scale().addTo(myMap);\n        this.props.setBounds(myMap.getBounds())\n        return myMap \n    }\n\n    render(){\n        return (\n            <div className=\"Map\">\n                <div id='myMap' className=\"map\"></div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        attractions: state.map.attractions\n    }\n}\nexport default connect(mapStateToProps, {getAttraction,highlightAttraction, getAttractionListShown })(Map) ","import React, { Component } from 'react' \nimport { connect } from 'react-redux'\nimport { getAttractions } from '../store/actions/MapActions'\n\n// two containers to render \nimport AttractionList from './AttractionList'\nimport Map from '../components/maps/Map'\n\nimport { fetchOTMData } from '../otmFunctions'\n\nclass MapPage extends Component {  \n    state = {\n        bounds:'', \n        attractions:'',\n        otmAttractions:'',\n        otmBoundsThreshold:5\n    }\n    \n    // setOTMAttractions sets the otmAttractions state attribute to the OTM attractions returned in otmFunctions\n    setOTMAttractions = data =>{\n        this.setState({\n            otmAttractions:data\n        })\n    }\n\n    queryOTMAttractions = (attractionBounds) => {\n        if (this.checkBounds(attractionBounds)){\n            // use setOTMAttractions to set this state to the return data \n            fetchOTMData(attractionBounds, this.setOTMAttractions)\n        }else{\n            this.setState({\n                otmAttractions:''\n            })\n        }\n\n    }\n    // make function to return bounds and set them to this state, then fire getAttractions with those bounds as the argument \n    setBounds = (bounds) => {\n        const attractionBounds = this.parseBounds(bounds)\n        this.props.getAttractions(attractionBounds)\n        this.setState({\n            bounds:attractionBounds,\n        })\n        this.queryOTMAttractions(attractionBounds)\n    }\n    \n    // function to parse what's brought back by getBounds() into useable format \n    parseBounds = (bounds) => {\n        return { \n            south: bounds._southWest.lat,\n            north: bounds._northEast.lat,\n            east: bounds._northEast.lng, \n            west: bounds._southWest.lng\n        }\n    }\n    \n    // check if map bounds are within threshold of finding otm data \n    checkBounds = bounds =>{\n        if (Math.abs(bounds.north) - Math.abs(bounds.south) > this.state.otmBoundsThreshold){\n            console.log('Scroll in farther to see OTM data')\n            return false; \n        } else {\n            return true; \n        }\n    }\n    \n    componentDidUpdate = (prevProps) => { \n        if (prevProps.attractions !== this.props.attractions){\n            this.setState({\n                attractions:this.props.attractions\n            })  \n        }\n    }\n    \n    render(){\n        return(\n        <>\n            <AttractionList \n                attractions={this.state.attractions}\n                otmAttractions={this.state.otmAttractions}\n            />\n            <Map \n                attractions={this.state.attractions}\n                otmAttractions={this.state.otmAttractions}\n                setBounds={this.setBounds}\n                parseBounds={this.parseBounds}\n            />\n        </>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {attractions: state.map.attractions}\n}\nexport default connect(mapStateToProps, { getAttractions })(MapPage)","import React, { Component } from 'react';\nimport Login from './auth/Login'\nimport Signup from './auth/Signup'\nimport CheckLogin from './auth/CheckLogin'\nimport Navbar from './containers/Navbar'\nimport About from './components/About'\nimport MyAttractionsList from './containers/MyAttractionsList'\nimport MyAccount from './components/myAccount/MyAccount'\nimport { connect } from 'react-redux'\nimport { logout } from './store/actions/authActions'\nimport { getUser } from './store/actions/UserActions'\nimport { setWindowWidth } from './store/actions/generalActions'\n\n// for '/' route: \nimport MapPage from './containers/MapPage'\n\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'; \n\nclass App extends Component {\n    state = {\n        attractions: [],\n        loggedIn:false\n    }\n\n    // set window witdth in store before component mounts \n    componentWillMount = () => {\n        this.props.setWindowWidth(window.innerWidth);\n    }\n\n    componentDidMount=()=>{\n        this.props.getUser()\n        // add window listener for screen size changing \n        window.addEventListener('resize', () => this.props.setWindowWidth(window.innerWidth))\n    }\n\n\n    changeAppLoggedIn = (boolean) =>{\n        this.setState({\n        loggedIn:boolean\n        })\n    }\n\n    render(){\n        return (\n        <Router>\n            <div id=\"mainContainer\">\n            <Switch>\n                <Route path=\"/login\" \n                component={()=>{\n                    return <Login changeAppLoggedIn={this.changeAppLoggedIn}/>\n                }}></Route>\n                {/* for logout route, set store state loggedIn to false and redirect to root  */}\n                <Route path=\"/logout\" component={()=>{\n                    this.props.logout()\n                    this.changeAppLoggedIn(false)\n                    return <Redirect to=\"/\"></Redirect>\n                }}></Route>\n                <Route path='/signup' component={()=>{\n                    return <Signup changeAppLoggedIn={this.changeAppLoggedIn}/>\n                }}></Route>\n                <Route path='/about' render={()=>{ return <About /> }}></Route>\n                {/* confirm user is logged in before going to myAttractions or myAccount */}\n                <Route path=\"/myAttractions\" render={() =>{ return <CheckLogin \n                                                                    render={()=>{\n                                                                        return <MyAttractionsList />\n                                                                    }\n                                                                    }\n                                                                    \n                                                                    />}}/>\n                <Route path=\"/myAccount\" render={() =>{ \n                return <CheckLogin \n                render={()=>{\n                    return <MyAccount />\n                }}\n                />\n                }}/>\n                <Route path=\"/\" render={()=>{ return <MapPage /> }}></Route>\n            </Switch>\n            <Navbar />\n            </div>\n        </Router>\n    );\n    }\n    }\n\n\nconst mapStateToProps = (state) => {\n    return {\n        loggedIn: state.loggedIn,\n        user: state.user.user\n    }\n}\nexport default connect(mapStateToProps, { logout,getUser,setWindowWidth })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const defaultState = {\n                        attractions:[], \n                        southWestBounds:'', \n                        northEastBounds:'',\n                        myAttractions:[],\n                        newAddress:{},\n                        highlightAttraction:''\n                    }\n\nconst mapReducer = (state = defaultState, action) => {\n    switch(action.type){\n        case 'GET_ATTRACTIONS': \n                return state = {\n                    ...state, \n                    attractions: action.attractions\n                }\n        case 'GET_MY_ATTRACTIONS':\n                return state = {\n                    ...state, \n                    myAttractions:action.myAttractions\n                }\n        case 'DELETE_ATTRACTION': \n                return state = {\n                    ...state, \n                    myAttractions:action.myAttractions\n                }\n        case 'UPDATE_ATTRACTION':\n                return state = {\n                    ...state, \n                    myAttractions:action.myAttractions\n                }\n                // debugger\n        case 'ADD_ATTRACTION': \n                return state = { \n                    ...state, \n                    myAttractions:action.myAttractions,\n                }\n        case 'UPDATE_USER': \n                return state = {\n                    ...state\n                }\n        case 'FILL_ATTRACTION_FORM': \n                return state = { \n                    ...state, \n                    newAddress:action.newAddress, \n                }\n        case 'SET_MAP': \n            return state = {\n                ...state, \n                map:action.map\n            }\n        case 'HIGHLIGHT_ATTRACTION': \n            return state = {\n                ...state,\n                highlightAttraction: action.attractionId\n            }\n        default: \n            return state\n    }\n}\nexport default mapReducer","// check if auth_token exists and base loggedIn off that \nfunction checkAuthToken(){\n    if (localStorage.auth_token){\n        return true \n    }\n    return false \n}\nconst defaultState = {\n    loggedIn:checkAuthToken(),\n    user:''\n}\n\nconst userReducer = (state=defaultState,action)=>{\n    switch(action.type){\n        case 'LOGIN': \n            return state = {\n                ...state, \n                loggedIn:true,\n                user:action.user\n            }\n        case 'LOGOUT': \n            return state = {\n                ...state, \n                loggedIn:false, \n                user:''\n            }\n            // Removed signup for now because it was doing the same thing as login. \n        // case 'SIGNUP': \n        //     return state = {\n        //         ...state, \n        //         loggedIn:true, \n        //         user: action.user\n        //     }\n        case 'UPDATE_PASSWORD': {\n            return state\n        }\n        case 'UPDATE_USER':{\n            return state = {\n                ...state, \n                user: action.user\n            }\n        }\n        case 'UPDATE_EMAIL': {\n            return state = {\n                ...state, \n                user: {\n                    ...state.user, \n                    email:action.email\n                }\n            }\n        }\n        case 'DELETE_USER': {\n            return state = {\n                ...state, \n                loggedIn:false,\n                user:''\n            }\n        }\n        case 'GET_USER': \n            return state = {\n                ...state, \n                user: action.user\n        }\n        default: \n            return state \n    }\n}\nexport default userReducer","const defaultState = {\n    attraction:''\n}\n\nconst attractionReducer = (state=defaultState,action)=>{\n    switch(action.type){\n        case 'GET_ATTRACTION': \n            return state = {\n                ...state, \n                attraction:action.attraction\n            }\n        case 'ADD_REVIEW':\n            return state = {\n                ...state, \n                attraction:action.attraction\n            }\n        case 'DELETE_REVIEW':\n            return state = {\n                ...state, \n                attraction: action.attraction\n            }\n        case 'SET_OTM_ATTRACTION_ID': \n            return state = {\n                ...state, \n                otmAttractionId:action.otmAttractionId\n            }\n        default: \n            return state \n    }\n}\nexport default attractionReducer","const defaultState = {\n    windowWidth:'',\n    showList:''\n}\n\nconst generalReducer = (state=defaultState, action) => {\n    switch(action.type){\n        case 'SET_WINDOW_WIDTH': \n            return state = {\n                ...state, \n                windowWidth: action.width\n            }\n        case \"SET_SHOWLIST\": \n            return state = {\n                ...state, \n                showList: action.showList\n            }\n        default: \n            return state \n    }\n}\n\nexport default generalReducer","import { combineReducers } from 'redux'\nimport map from './mapReducer'\nimport user from './userReducer'\nimport attraction from './attractionReducer'\nimport general from './generalReducer'\n\nexport default combineReducers({ \n    map,\n    user,\n    attraction,\n    general\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport {createStore, applyMiddleware, compose} from 'redux' \n// import mapReducer from './store/reducers/mapReducer'\nimport reducer from './store/reducers/index'\nimport thunk from 'redux-thunk'\n\n\n \n// const store = createStore(mapReducer, applyMiddleware(thunk))\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, undefined, composeEnhancers(applyMiddleware(thunk)))\n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}